(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{400:function(e,r,o){"use strict";o.r(r);var n=o(54),a=Object(n.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"modules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[e._v("#")]),e._v(" Modules")]),e._v(" "),o("p",[e._v("A module is an application or component of an application that may be deployed into Zephyr. A module\nmay be packaged as a "),o("code",[e._v("JAR")]),e._v(", a "),o("code",[e._v("WAR")]),e._v(" or any other file-format for which there is a\ncorresponding "),o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/tree/master/kernel-api/src/main/java/io/zephyr/kernel/extensions",target:"_blank",rel:"noopener noreferrer"}},[e._v("io.zephyr.kernel.extensions.ModuleAssemblyExtractor"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("There are several implementations of this class supporting:")]),e._v(" "),o("ol",[o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-modules/kernel-lib/src/main/java/io/zephyr/kernel/module/JarModuleAssemblyExtractor.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("JAR Files"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-modules/kernel-lib/src/main/java/io/zephyr/kernel/module/WarModuleAssemblyExtractor.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("WAR Files"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-modules/sunshower-spring/src/main/java/io/zephyr/spring/ext/SpringModuleAssemblyExtractor.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Boot WARs"),o("OutboundLink")],1)])]),e._v(" "),o("p",[e._v("As you can see, adding support for new module formats is quite easy: simply implement\nyour "),o("code",[e._v("ModuleAssemblyExtractor")]),e._v("\nand add a "),o("code",[e._v("META-INF/services/io.zephyr.kernel.extensions.ModuleAssemblyExtractor")]),e._v(" file that refers\nto it per the\n"),o("a",{attrs:{href:"https://docs.oracle.com/javase/tutorial/ext/basics/spi.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Services API"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("These ModuleAssemblyExtractors must be installed as [Kernel Modules](##Kernel Modules)")]),e._v(" "),o("h3",{attrs:{id:"some-notes-on-zephyr-vs-the-java-services-api-java-module-framework"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#some-notes-on-zephyr-vs-the-java-services-api-java-module-framework"}},[e._v("#")]),e._v(" Some notes on Zephyr vs. the Java Services API + Java Module Framework")]),e._v(" "),o("p",[e._v("There is a good deal of overlap between Zephyr and "),o("em",[e._v("combination")]),e._v(" of the Java Services API and the _\nJava Module Framework_. So what's the difference?")]),e._v(" "),o("h4",{attrs:{id:"topological-ordering"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#topological-ordering"}},[e._v("#")]),e._v(" Topological Ordering")]),e._v(" "),o("p",[e._v("Zephyr computes a dependency graph over each set of modules that are installed. Contrary to many\navailable plugin frameworks, dependency lifecycle ordering is implicitly encoded within this graph.\nWe have found it very challenging, for instance, in OSGi to explicitly manage the dependency\nlifecycle across hundreds of bundles and thousands of services. Zephyr cleanly and elegantly solves\nfor this.")]),e._v(" "),o("h4",{attrs:{id:"ui-ux-extensibility"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ui-ux-extensibility"}},[e._v("#")]),e._v(" UI/UX Extensibility")]),e._v(" "),o("p",[e._v("Zephyr natively understands [Aire-UX] widgets, which allows us to dynamically add and remove\nfunctionality to a single-page web application")]),e._v(" "),o("h2",{attrs:{id:"kernel-modules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#kernel-modules"}},[e._v("#")]),e._v(" Kernel Modules")]),e._v(" "),o("p",[e._v("The Zephyr Kernel is also extensible, but at a lower level than Zephyr modules. Kernel modules may\nalso define extension-points, so the kernel is recursively extensible. The primary kernel extension\npoints are:")]),e._v(" "),o("ol",[o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-core/src/main/resources/META-INF/services/io.sunshower.kernel.core.ModuleScanner",target:"_blank",rel:"noopener noreferrer"}},[e._v("io.sunshower.kernel.core.ModuleScanner"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-core/src/main/resources/META-INF/services/io.zephyr.kernel.extensions.EntryPoint",target:"_blank",rel:"noopener noreferrer"}},[e._v("io.zephyr.kernel.extensions.EntryPoint"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-core/src/main/resources/META-INF/services/java.nio.file.spi.FileSystemProvider",target:"_blank",rel:"noopener noreferrer"}},[e._v("java.nio.file.spi.FileSystemProvider"),o("OutboundLink")],1),e._v(" (\nZephyr provides its own cluster-aware filesystem)")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/sunshower-io/zephyr/blob/master/kernel-api/src/main/java/io/zephyr/kernel/core/ModuleClasspathManagerProvider.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("io.zephyr.kernel.core.ModuleClasspathManagerProvider"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("code",[e._v("io.zephyr.kernel.core.ModuleAssemblyExtractor")]),e._v(" (discussed above)")])]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("io.zephyr.kernel.extensions.EntryPoint")]),e._v(" is a good candidate for registering new functionality, including\nnew extension-points for the kernel.")])])}),[],!1,null,null,null);r.default=a.exports}}]);